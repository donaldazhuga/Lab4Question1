trigger:
- master

pool:
  name: 'AgentDonalda'

variables:
  buildConfiguration: 'Release'
  projectName: 'StringExtensionLibrary'  # Your project name
  projectFile: '**/$(projectName).csproj'  # Dynamic project file path

steps:
# Step 1: Install .NET 8 SDK
- task: UseDotNet@2
  displayName: 'Install .NET 8 SDK'
  inputs:
    version: '8.x'
    installationPath: 'C:\sdk'

# Step 2: Debug - Show directory structure
- powershell: |
    Write-Host "##[section]Repository Structure:"
    Get-ChildItem -Path $(Build.SourcesDirectory) -Recurse | Format-Table FullName
    Write-Host "##[section]Looking for project file: $(projectFile)"
    Get-ChildItem -Path $(Build.SourcesDirectory) -Filter *.csproj -Recurse
  displayName: 'Debug: Show Directory Structure'

# Step 3: Restore packages
- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '$(projectFile)'

# Step 4: Build project
- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '$(projectFile)'
    arguments: '--configuration $(buildConfiguration) --no-restore'

# Step 5: Pack NuGet package
- task: DotNetCoreCLI@2
  displayName: 'Create NuGet package'
  inputs:
    command: 'pack'
    packagesToPack: '$(projectFile)'
    configuration: '$(buildConfiguration)'
    outputDir: '$(Build.ArtifactStagingDirectory)'
    nobuild: true
    versioningScheme: 'byBuildNumber'
    verbosityPack: 'detailed'

# Step 6: Verify package creation
- powershell: |
    $packages = Get-ChildItem -Path $(Build.ArtifactStagingDirectory) -Filter *.nupkg
    if (!$packages) {
        Write-Host "##vso[task.logissue type=error]No packages found in $(Build.ArtifactStagingDirectory)"
        exit 1
    }
    Write-Host "##[section]Created packages:"
    $packages | Format-Table FullName
  displayName: 'Verify Package Creation'