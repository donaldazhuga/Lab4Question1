trigger:
- master

pool:
  name: 'AgentDonalda'

variables:
  buildConfiguration: 'Release'
  packageVersion: '1.0.$(Build.BuildId)'  # Auto-increment version
  projectName: 'StringLibrary'
  feedName: 'StringExtensionLibrary/newfeed'
  feedUrl: 'https://pkgs.dev.azure.com/dzhuga/StringExtensionLibrary/_packaging/newfeed/nuget/v3/index.json'

steps:
# Step 1: Install .NET 8 SDK
- task: UseDotNet@2
  displayName: 'Install .NET 8 SDK'
  inputs:
    version: '8.x'
    installationPath: 'C:\sdk'

# Step 2: Create nuget.config
- powershell: |
    @"
    <?xml version="1.0" encoding="utf-8"?>
    <configuration>
      <packageSources>
        <clear />
        <add key="newfeed" value="$(feedUrl)" />
      </packageSources>
    </configuration>
    "@ | Out-File -FilePath 'nuget.config' -Encoding utf8
    Write-Host "Created nuget.config:"
    Get-Content 'nuget.config'
  displayName: 'Create nuget.config'

# Step 3: Restore packages
- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/$(projectName).csproj'
    feedsToUse: 'config'
    nugetConfigPath: 'nuget.config'

# Step 4: Build project
- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '**/$(projectName).csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore --verbosity detailed'

# Step 5: Pack NuGet package (with auto-versioning)
- task: DotNetCoreCLI@2
  displayName: 'Create NuGet package'
  inputs:
    command: 'pack'
    packagesToPack: '**/$(projectName).csproj'
    configuration: '$(buildConfiguration)'
    outputDir: '$(Build.ArtifactStagingDirectory)'
    nobuild: true
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'packageVersion'
    arguments: '--verbosity detailed'

# Step 6: Debug - Show package files
- script: |
    echo "Generated packages:"
    ls $(Build.ArtifactStagingDirectory)
  displayName: 'List generated packages'

# Step 7: Authenticate
- task: NuGetAuthenticate@1
  displayName: 'Authenticate with Azure Artifacts'

# Step 8: Push to Azure Artifacts (with duplicate handling)
- task: DotNetCoreCLI@2
  displayName: 'Push to Azure Artifacts'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '$(feedName)'
    arguments: '--skip-duplicate --verbosity detailed'