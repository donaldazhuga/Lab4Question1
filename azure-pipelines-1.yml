trigger:
- master

pool:
  name: 'AgentDonalda'

variables:
  buildConfiguration: 'Release'
  projectPath: '**/StringExtensionLibrary.csproj'  # Explicit path to your project file

steps:
# Step 1: Install .NET 8 SDK
- task: UseDotNet@2
  displayName: 'Install .NET 8 SDK'
  inputs:
    version: '8.x'
    installationPath: 'C:\sdk'

# Step 2: Verify .NET installation
- script: |
    echo "DotNET Version:"
    dotnet --version
    echo "Installed SDKs:"
    dotnet --list-sdks
    echo "Project directory contents:"
    dir $(Build.SourcesDirectory) /s
  displayName: 'Verify Environment'

# Step 3: Restore NuGet packages
- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '$(projectPath)'

# Step 4: Build project
- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '$(projectPath)'
    arguments: '--configuration $(buildConfiguration) --no-restore'

# Step 5: Create NuGet package (FIXED)
- task: DotNetCoreCLI@2
  displayName: 'Create NuGet package'
  inputs:
    command: 'pack'
    packagesToPack: '$(projectPath)'
    configuration: '$(buildConfiguration)'
    outputDir: '$(Build.ArtifactStagingDirectory)'
    nobuild: true
    versioningScheme: 'byBuildNumber'
    verbosityPack: 'detailed'

# Step 6: Verify package
- script: |
    echo "Generated packages:"
    dir $(Build.ArtifactStagingDirectory) /s
    if exist "$(Build.ArtifactStagingDirectory)\*.nupkg" (
      echo "Package created successfully"
    ) else (
      echo "##vso[task.logissue type=error]No package was created"
      exit 1
    )
  displayName: 'Verify Package Creation'

# Step 7: Push to Azure Artifacts
- task: NuGetAuthenticate@1
  displayName: 'Authenticate with Azure Artifacts'

- task: DotNetCoreCLI@2
  displayName: 'Push to Azure Artifacts'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'dzhuga/StringExtensionLibrary/newfeed'