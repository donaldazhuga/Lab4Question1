# ASP.NET Pipeline for StringExtensionLibrary
# Build, pack, and push .NET 8 NuGet package to Azure Artifacts

trigger:
- main  # Changed from 'master' to 'main' to match modern GitHub defaults

pool:
  name: 'AgentDonalda'  # Self-hosted agent pool

variables:
  buildConfiguration: 'Release'
  solution: '**/*.sln'
  nugetFeed: 'dzhuga/StringExtensionLibrary/newfeed'  # Centralized feed reference

steps:
# Step 1: Install .NET 8 SDK
- task: UseDotNet@2
  displayName: 'Install .NET 8 SDK'
  inputs:
    version: '8.x'
    installationPath: 'C:\sdk'
    includePreviewVersions: false

# Step 2: Verify .NET SDK Installation
- script: |
    echo "Verifying .NET SDK installation..."
    dotnet --version
    dotnet --list-sdks
  displayName: 'Verify .NET SDK Installation'

# Step 3: Debug working directory
- script: |
    echo "Contents of working directory:"
    dir $(Build.SourcesDirectory) /s /b
  displayName: 'Inspect Working Directory'

# Step 4: Restore NuGet dependencies
- task: NuGetCommand@2
  displayName: 'Restore dependencies'
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'
    feedsToUse: 'select'
    vstsFeed: '$(nugetFeed)'
    noCache: true

# Step 5: Build the solution
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --no-restore'

# Step 6: Create NuGet package
- task: DotNetCoreCLI@2
  displayName: 'Pack NuGet package'
  inputs:
    command: 'pack'
    packagesToPack: '**/StringExtensionLibrary.csproj'
    versioningScheme: 'byBuildNumber'
    configuration: '$(buildConfiguration)'
    outputDir: '$(Build.ArtifactStagingDirectory)'
    arguments: '--no-build'

# Step 7: Verify package creation
- script: |
    echo "Generated packages:"
    dir $(Build.ArtifactStagingDirectory) /s /b
    echo "Package contents:"
    nuget.exe list -Source "$(Build.ArtifactStagingDirectory)"
  displayName: 'Verify NuGet Package'

# Step 8: Authenticate with Azure Artifacts
- task: NuGetAuthenticate@1
  displayName: 'Authenticate with Azure Artifacts'

# Step 9: Push package to feed
- task: NuGetCommand@2
  displayName: 'Push to Azure Artifacts'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '$(nugetFeed)'
    allowPackageConflicts: false
    verbosityPush: 'Detailed'