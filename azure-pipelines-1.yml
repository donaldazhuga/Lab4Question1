trigger:
- master

pool:
  name: 'AgentDonalda'

variables:
  buildConfiguration: 'Release'
  packageVersion: '1.0.0'  # Explicit version instead of byBuildNumber
  projectName: 'StringExtensionLibrary'
  projectFile: '**/$(projectName).csproj'

steps:
# Step 1: Install .NET 8 SDK
- task: UseDotNet@2
  displayName: 'Install .NET 8 SDK'
  inputs:
    version: '8.x'
    installationPath: 'C:\sdk'

# Step 2: Debug repository structure
- powershell: |
    Write-Host "##[section]Repository Contents:"
    Get-ChildItem -Path $(Build.SourcesDirectory) -Recurse | Format-Table FullName
    
    Write-Host "##[section]Searching for project file: $(projectFile)"
    $projFile = Get-ChildItem -Path $(Build.SourcesDirectory) -Filter '$(projectName).csproj' -Recurse
    if ($projFile) {
        Write-Host "##[section]Found project at: $($projFile.FullName)"
        Write-Host "##vso[task.setvariable variable=actualProjectFile]$($projFile.FullName)"
    } else {
        Write-Host "##vso[task.logissue type=error]Project file not found!"
        exit 1
    }
  displayName: 'Locate Project File'

# Step 3: Restore packages
- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '$(actualProjectFile)'
    feedsToUse: 'select'
    vstsFeed: 'dzhuga/StringExtensionLibrary/newfeed'

# Step 4: Build project
- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '$(actualProjectFile)'
    arguments: '--configuration $(buildConfiguration) --no-restore'

# Step 5: Pack NuGet package (Fixed Versioning)
- task: DotNetCoreCLI@2
  displayName: 'Create NuGet package'
  inputs:
    command: 'pack'
    packagesToPack: '$(actualProjectFile)'
    configuration: '$(buildConfiguration)'
    outputDir: '$(Build.ArtifactStagingDirectory)'
    nobuild: true
    versioningScheme: 'byEnvVar'  # Changed from byBuildNumber
    versionEnvVar: 'packageVersion'  # Uses our explicit version variable
    verbosityPack: 'detailed'

# Step 6: Verify package
- powershell: |
    $nupkg = Get-ChildItem -Path $(Build.ArtifactStagingDirectory) -Filter '*.nupkg'
    if ($nupkg) {
        Write-Host "##[section]Successfully created package:"
        $nupkg | Format-Table FullName,Length,LastWriteTime
    } else {
        Write-Host "##vso[task.logissue type=error]Package creation failed!"
        exit 1
    }
  displayName: 'Verify Package'

# Step 7: Push to Azure Artifacts
- task: NuGetAuthenticate@1
  displayName: 'Authenticate with Azure Artifacts'

- task: DotNetCoreCLI@2
  displayName: 'Push to Azure Artifacts'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'dzhuga/StringExtensionLibrary/newfeed'