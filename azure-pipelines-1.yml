# ASP.NET Pipeline for StringExtensionLibrary (master branch)
# Build, pack, and push .NET 8 NuGet package to Azure Artifacts

trigger:
- master  # Keeping as 'master' to match your repository

pool:
  name: 'AgentDonalda'  # Self-hosted agent pool

variables:
  buildConfiguration: 'Release'
  solution: '**/*.sln'
  nugetFeed: 'dzhuga/StringExtensionLibrary/newfeed'  # Your Azure Artifacts feed

steps:
# Step 1: Install .NET 8 SDK
- task: UseDotNet@2
  displayName: 'Install .NET 8 SDK'
  inputs:
    version: '8.x'
    installationPath: 'C:\sdk'

# Step 2: Verify .NET installation
- script: |
    echo "DotNET Version:"
    dotnet --version
    echo "Installed SDKs:"
    dotnet --list-sdks
  displayName: 'Verify .NET Installation'

# Step 3: Debug workspace
- script: |
    echo "Workspace contents:"
    dir $(Build.SourcesDirectory)
  displayName: 'Inspect Workspace'

# Step 4: Restore NuGet packages
- task: NuGetCommand@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'
    feedsToUse: 'select'
    vstsFeed: '$(nugetFeed)'

# Step 5: Build solution
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

# Step 6: Create NuGet package
- task: DotNetCoreCLI@2
  displayName: 'Create NuGet package'
  inputs:
    command: 'pack'
    packagesToPack: '**/StringExtensionLibrary.csproj'
    configuration: '$(buildConfiguration)'
    outputDir: '$(Build.ArtifactStagingDirectory)'

# Step 7: Verify package
- script: |
    echo "Generated packages:"
    dir $(Build.ArtifactStagingDirectory)
  displayName: 'Verify Package'

# Step 8: Push to Azure Artifacts
- task: NuGetCommand@2
  displayName: 'Push to Azure Artifacts'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '$(nugetFeed)'
    verbosityPush: 'Detailed'