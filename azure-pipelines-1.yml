trigger:
- master

pool:
  name: 'AgentDonalda'

variables:
  buildConfiguration: 'Release'
  packageVersion: '1.0.0'
  projectName: 'StringLibrary'  # Changed to match your actual project name
  projectFile: '**/$(projectName).csproj'

steps:
# Step 1: Install .NET 8 SDK
- task: UseDotNet@2
  displayName: 'Install .NET 8 SDK'
  inputs:
    version: '8.x'
    installationPath: 'C:\sdk'

# Step 2: Debug repository structure
- powershell: |
    Write-Host "##[section]Actual Project Files:"
    Get-ChildItem -Path $(Build.SourcesDirectory) -Filter *.csproj -Recurse | Format-Table FullName
  displayName: 'List All Project Files'

# Step 3: Restore packages
- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/$(projectName).csproj'
    feedsToUse: 'select'
    vstsFeed: 'dzhuga/StringExtensionLibrary/newfeed'

# Step 4: Build project
- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '**/$(projectName).csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore'

# Step 5: Pack NuGet package
- task: DotNetCoreCLI@2
  displayName: 'Create NuGet package'
  inputs:
    command: 'pack'
    packagesToPack: '**/$(projectName).csproj'
    configuration: '$(buildConfiguration)'
    outputDir: '$(Build.ArtifactStagingDirectory)'
    nobuild: true
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'packageVersion'

# Step 6: Verify package
- script: |
    echo "Generated packages:"
    dir $(Build.ArtifactStagingDirectory)
  displayName: 'Verify Package Creation'

# Step 7: Push to Azure Artifacts
- task: NuGetAuthenticate@1
  displayName: 'Authenticate with Azure Artifacts'

- task: DotNetCoreCLI@2
  displayName: 'Push to Azure Artifacts'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'dzhuga/StringExtensionLibrary/newfeed'